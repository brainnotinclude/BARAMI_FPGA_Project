이건 CSR 리턴 버전이다.

코멘트: 만약 문자열 끝에 줄넘김과 널이 같이 나온다면 이중으로 줄넘김이 일어나는 참사 발생함..
+ 예전에 특정 절대주소를 정했던거 같은데 아직은 반영 안함...

//NULL 아닐 때까지 무한 루프 ? 필요한 가? 처음으로 NULL 만나면 줄 넘기고 나서 초기화 해야할듯?

//다시 돌아올 위치 마크

//문자 읽어내어 출력하는 if문 루프.

//

입력: 1차원 배열 with 문자열 + NULL
처리:
문자열 내용 인식 및 출력. 만약 내용 중 줄 넘김이나 공백 있으면 그것도 반영해야함
결과:
사용자가 수식 입력하고 엔터 누르면 그 뒤 공백 하나 만들고 결과물 표시. 그 뒤 줄 넘김.
그 뒤에 사용자가 입력 가능.

반응해야 하는(=if문 만들어야 하는) 아스키코드 문자들.
NULL - 0 무조건 CSR 리턴을 시전한다.
\n - 10 무조건 줄넘김

줄넘김 동작: ((RS7 / 80)+1) * 80 = RS7
만약 RS7 / 80이 44라면 RS7이 0으로 초기화되고 동작이 종료된다.


일단 정한 변수명(전부 레지스터를 의미한다.):
OIabs - 메모리에서 입력받을 1차원 배열 위치
Mabs - 메모리에서 매트릭스 위치
//DBabs - DB의 위치 레지스터
Result - 결과물 레지스터
R0 - 비교를 위한 0의 레지스터
R1 - 비교를 위한 1의 레지스터
R2 - 비교를 위한 2의 레지스터
R15 - 비교를 위한 \n의 레지스터 재밌는 점은 아스키코드로 10에 해당.
R16 - 비교를 위한 공백의 레지스터 아스키코드 32번.
R17 - 줄 위치 연산을 위한 80의 레지스터
R18 - 줄 위치 연산을 위한 44의 레지스터
RSTA - 값이 0으로 고정인 레지스터
CSR - 다음 인스트럭션의 주소가 담긴 레지스터. 널문자를 만나면 이 레지스터 내부의 주솟값으로 점프한다.

RS1 - 숫자 1의 레지스터
RS4 - 현재 읽고 있는 입력배열 커서 위치
RS5 - offset에 직접 레지스터 주소를 칠 수 없는 문제로 인한 임시주소 레지스터
RS6 - 저장 전 비교를 위한 작업 레지스터
RS7 - 현재 쓰고 있는 matrix 커서 위치
RSIG1 - 점프 위치 저장 레지스터 1
RSIG2 - 다음 수식을 처리를 위한 전체 초기화 위치 저장 레지스터 2

<코드>

//비교를 위한 레지스터 초기화
xor RSTA RSTA RSTA
add R0 RSTA 48
add R1 RSTA 49
add R15 RSTA 10
add R16 RSTA 32
add R17 RSTA 80
add R18 RSTA 44

//읽기/쓰기 카운터 초기화
add RS4 RSTA 0
add RS7 RSTA 0

//초기화용 위치레지스터 저장
auipc RSIG2 0

//각 저장 레지스터 및 임시 주소 초기화
add RS1 RSTA 0
add RS5 RSTA 0
add RS6 RSTA 0

//메인 코드 시작

// 문자 읽어오기
auipc RSIG1 0
add RS5 OIabs RS4
lw RS6 RS5 0

// 대응이 필요한 특수 기호들 처리...라고 해도 널문자도 줄바꿈이고 뭐.. 커서이동만 있지 출력은 딱히 없다.
//참고로 줄이 44번째(0~44)를 넘어가려 하면 다시 출력이 맨 위부터 나오도록 해 놓았다.

//줄바꿈 처리 \n

bne RS6 R15 44
div RS1 RS7 R17
bne RS1 R18 20
xor RS7 RS7 RS7
xor RS1 RS1 RS1
addi RS4 RS4 1
jalr RS5 RSIG1 0
addi RS1 RS1 1
mul RS7 RS1 R17
addi RS4 RS4 1
jalr RS5 RSIG1 0

// 작성중 비트를 확인, 해당 비트가 1일 때만 널 문자 처리.

bne RS6 R0 8
jalr RS5 CSR 0

//공백 처리

bne RS6 R16 16
addi RS4 RS4 1
addi RS7 RS7 1
jalr RS5 RSIG1 0

//일반 문자 처리 - 그대로 전송함.

add RS5 Mabs RS7
sw RS6 RS5 0
addi RS4 RS4 1
addi RS7 RS7 1
jalr RS5 RSIG1 0


