결론:
코드가 거의 단순하고 예외적인 경우도 거의 없어 검토할 것이 많지 않았음. - 데이터 전달이 잘 되는지 위주로 검토.

1. instruction B파트에 대해 코드 복붙으로 인한 instA들어가있음. instB로 바꿀 필요 있어보임.

2. 버블에서는 어떠한 일도 일어나지 않았음. 데이터 입력이 들어와도 출력되지 않음.

3. 입력한 데이터는 제대로 전달되는지. - 기본 테스트 벤치 이용, 확인해보니 잘 작동함.

4. rs배정은 계획한 순서대로 진행되는지 - 테스트 벤치 내내 계획한 대로 작동 중.

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2024/08/12 23:32:01
// Design Name: 
// Module Name: dispatch
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


//Caution: This file is not completed. Synthesis. simulation is needed. Also, comments should be written
//Assume input instA/B is rs2_vt(32bit) + valid bit(1bit) + rs1_vt(32bit) + valid bit(1bit) + rd(5bit) + ALU_ctrl(5bit) + dispatch_ctrl(2bit) = 78bit
//Dispatch control sigal -> 11: Both simple/complex(사칙연산), 01: Complex only(로드 & 스토어), 10:FP only(부동소수점?) 
//Control signal 00 will mean bubble(가만히 있는 것, 아무것도 안하는 것).
module dispatch(
    input [77:0] instA,             //Caution!!!: Bit width should be match with decoder output
    input [77:0] instB,
    input complex_empty_0,          //Distributed RS: Empty bit for each RS entry 각 입력마다 고유한 레지스터가 필요함. 각 2개씩으로 보고 제작.
    input complex_empty_1,
    input simple_empty_0,
    input simple_empty_1,
    input fp_empty_0,
    input fp_empty_1,
    
    //Dispatch module makes an output for an instruction to one of RS entries. We need data port and valid bit(So the entry knows that it should save given data) 
    output reg [75:0] complex_0_data,          
    output reg complex_0_valid,
    output reg [75:0] complex_1_data,
    output reg complex_1_valid,
    output reg [75:0] simple_0_data,
    output reg simple_0_valid,
    output reg [75:0] simple_1_data,
    output reg simple_1_valid,
    output reg [75:0] fp_0_data,
    output reg fp_0_valid,
    output reg [75:0] fp_1_data,
    output reg fp_1_valid,
    output reg rs_full_A,               //For stall: It means that RS corresponding to type of instruction A is full. It doesn't mean all RS is full. 해당 종류의 레지스터 꽉 차서 멈춰야 한다는 신호.
    output reg rs_full_B
    );
    
    wire [5:0] rs_valid;
    reg [5:0] rs_valid_B;
    
    wire [1:0] dispatch_control_A;
    wire [1:0] dispatch_control_B;
    reg [2:0] selected_RS_A;
    reg [2:0] selected_RS_B;
    
    
    assign rs_valid = {complex_empty_0, complex_empty_1, simple_empty_0, simple_empty_1, fp_empty_0, fp_empty_1};                           //Concat the valid bits for each entries
    assign dispatch_control_A = instA[1:0];                 //Lower 2 bits are control bits for dispatch module 내려온 비트 중 최하 2비트가 컨트롤 비트.
    assign dispatch_control_B = instB[1:0];
    
    
    //Select RS position
    always@(*) begin
        //Except valid output port, all outputs should be marked as invalid.
        complex_0_data = 0;
        complex_0_valid = 0;
        complex_1_data = 0;
        complex_1_valid = 0;
        simple_0_data = 0;
        simple_0_valid = 0;
        simple_1_data = 0;
        simple_1_valid = 0;
        fp_0_data = 0;
        fp_0_valid = 0;
        fp_1_data = 0;
        fp_1_valid = 0;
        rs_valid_B = rs_valid;   // 동시에 같은 레지스터를 사용하면 안된다. 레지스터 파일의 빈 rrf 찾는 방식과 같은 구조.
        rs_full_A = 0;                          
        rs_full_B = 0;

        //A파트
        if(dispatch_control_A == 2'b11) begin
            casex(rs_valid[5:2])                //"Simple"type can goes into complex0/1, simple0/1
                4'bxxx1: begin
                    simple_1_data = instA[77:2];
                    simple_1_valid = 1'b1;
                    rs_valid_B[2] = 1'b0;
                end
                4'bxx10: begin
                    simple_0_data = instA[77:2];
                    simple_0_valid = 1'b1;
                    rs_valid_B[3] = 1'b0;
                end
                4'bx100: begin
                    complex_1_data = instA[77:2];
                    complex_1_valid = 1'b1;
                    rs_valid_B[4] = 1'b0;
                end
                4'b1000: begin
                    complex_0_data = instA[77:2];
                    complex_0_valid = 1'b1;
                    rs_valid_B[5] = 1'b0;
                end
                default:                    //error case: RS full
                    rs_full_A = 1'b1;
            endcase
        end
        else if(dispatch_control_A == 2'b01) begin
            casex(rs_valid[5:4])                //"Complex" type can goes into complex 0/1
                2'bx1: begin
                    complex_1_data = instA[77:2];
                    complex_1_valid = 1'b1;
                    rs_valid_B[4] = 1'b0;
                end
                2'b10: begin
                    complex_0_data = instA[77:2];
                    complex_0_valid = 1'b1;
                    rs_valid_B[5] = 1'b0;
                end
                default:                    //error case: RS full
                    rs_full_A = 1'b1;
            endcase
        end
        else if(dispatch_control_A == 2'b10) begin
            casex(rs_valid[1:0])                //"FP" type can goes into FP 0/1
                2'bx1: begin
                    fp_1_data = instA[77:2];
                    fp_1_valid = 1'b1;
                    rs_valid_B[0] = 1'b0;
                end
                2'b10: begin
                    fp_0_data = instA[77:2];
                    fp_0_valid = 1'b1;
                    rs_valid_B[1] = 1'b0;
                end
                default:                    //error case: RS full
                    rs_full_A = 1'b1;
            endcase
        end
        else if(dispatch_control_A == 2'b00)begin
            //Do nothing;
        end
        
        // B파트
        //rs_valid_B = rs_valid | (6'b000001 << selected_RS_A);           //Index 번호 주의할것!!!!!!! > 무시하기.
        
        //Handle same as instruction A, but should not select port that is using by A: So use rs_valid_B 
        if(dispatch_control_B == 2'b11) begin
            casex(rs_valid_B[5:2])
                4'bxxx1: begin
                    simple_1_data = instA[77:2];
                    simple_1_valid = 1'b1;
                end
                4'bxx10: begin
                    simple_0_data = instA[77:2];
                    simple_0_valid = 1'b1;
                end
                4'bx100: begin
                    complex_1_data = instA[77:2];
                    complex_1_valid = 1'b1;
                end
                4'b1000: begin
                    complex_0_data = instA[77:2];
                    complex_0_valid = 1'b1;
                end
                default:                    //error case: RS full
                    rs_full_B = 1'b1;
            endcase
        end
        else if(dispatch_control_B == 2'b01) begin
            casex(rs_valid_B[5:4])
                2'bx1: begin
                    complex_1_data = instA[77:2];
                    complex_1_valid = 1'b1;
                end
                2'b10: begin
                    complex_0_data = instA[77:2];
                    complex_0_valid = 1'b1;
                end
                default:                    //error case: RS full
                    rs_full_B = 1'b1;
            endcase
        end
        else if(dispatch_control_B == 2'b10) begin
            casex(rs_valid_B[1:0])
                2'bx1: begin
                    fp_1_data = instA[77:2];
                    fp_1_valid = 1'b1;
                end
                2'b10: begin
                    fp_0_data = instA[77:2];
                    fp_0_valid = 1'b1;
                end
                default:                    //error case: RS full
                    rs_full_B = 1'b1;
            endcase
        end
        else if(dispatch_control_B == 2'b00) begin
            //Do nothing
        end
    end
    
endmodule

체크리스트
1. B파트에 대해 코드 복붙으로 인한 instA들어가있음. instB로 바꿀 필요 있어보임.

2. 버블에서 작동하는 에러가 존재하는지. > 어떠한 일도 일어나지 않음. 데이터 입력이 들어와도 출력되지 않음.

3. 입력한 데이터는 제대로 전달되는지. - 기본 테스트 벤치 이용, 확인해보니 잘 작동함.

4. rs배정은 계획한 순서대로 진행되는지 - 테스트 벤치 내내 계획한 대로 작동 중.

병찬 파일 이름: dispatch_tb

기본 파일 이름: tb_dispatch

11: Both simple/complex(사칙연산), 01: Complex only(로드 & 스토어), 10:FP only(부동소수점?) 00 will mean bubble(가만히 있는 것, 아무것도 안하는 것).

11:11의 경우:
A,B 둘다 작동하는경우. 4개 중 최소 2개 빔. - 기본
A만 작동하는 경우. 4개 중 1개 빔. - 나
B만 작동하는 경우.
둘다 작동하지 않는 경우. - 기본
11:01
A,B 둘다 작동하는경우.
A만 작동하는 경우.
B만 작동하는 경우.
둘다 작동하지 않는 경우.
11:10
A,B 둘다 작동하는경우.
A만 작동하는 경우.
B만 작동하는 경우.
둘다 작동하지 않는 경우.
11:00
A,B 둘다 작동하는경우.- 존재하면 에러
A만 작동하는 경우.
B만 작동하는 경우.- 존재하면 에러
둘다 작동하지 않는 경우.

01:11
A,B 둘다 작동하는경우.
A만 작동하는 경우.
B만 작동하는 경우.
둘다 작동하지 않는 경우.
01:01
A,B 둘다 작동하는경우. - 기본
A만 작동하는 경우.
B만 작동하는 경우.
둘다 작동하지 않는 경우.
01:10
A,B 둘다 작동하는경우.
A만 작동하는 경우.
B만 작동하는 경우.
둘다 작동하지 않는 경우.
01:00
A,B 둘다 작동하는경우.- 존재하면 에러
A만 작동하는 경우.
B만 작동하는 경우.- 존재하면 에러
둘다 작동하지 않는 경우.

10:11
A,B 둘다 작동하는경우. - 병찬
A만 작동하는 경우.
B만 작동하는 경우.
둘다 작동하지 않는 경우.
10:01
A,B 둘다 작동하는경우.
A만 작동하는 경우.
B만 작동하는 경우.
둘다 작동하지 않는 경우.
10:10
A,B 둘다 작동하는경우. - 병찬
A만 작동하는 경우. - 병찬
B만 작동하는 경우.
둘다 작동하지 않는 경우. - 병찬
10:00
A,B 둘다 작동하는경우.- 존재하면 에러
A만 작동하는 경우. - 병찬
B만 작동하는 경우.- 존재하면 에러
둘다 작동하지 않는 경우.

00:11
A,B 둘다 작동하는경우.- 존재하면 에러
A만 작동하는 경우.- 존재하면 에러
B만 작동하는 경우.
둘다 작동하지 않는 경우.
00:01
A,B 둘다 작동하는경우.- 존재하면 에러
A만 작동하는 경우.- 존재하면 에러
B만 작동하는 경우.
둘다 작동하지 않는 경우.
00:10
A,B 둘다 작동하는경우.- 존재하면 에러
A만 작동하는 경우.- 존재하면 에러
B만 작동하는 경우.
둘다 작동하지 않는 경우.
00:00
A,B 둘다 작동하는경우. - 존재하면 에러
A만 작동하는 경우. - 존재하면 에러
B만 작동하는 경우. - 존재하면 에러
둘다 작동하지 않는 경우. - 기본