module alu_mux(
    input [1:0]mux1,           // 첫 번째 ALU 입력(aluin1)을 선택하는 제어 신호
    input [1:0]mux2,           // 두 번째 ALU 입력(aluin2)을 선택하는 제어 신호
    input [31:0]rs1,           // 레지스터 소스 1 값
    input [31:0]rs2,           // 레지스터 소스 2 값
    input [31:0]pc,            // 프로그램 카운터 값
    input [11:0]imm,           // ??
    input [4:0]shamt,          // ??
    input [19:0]imm_20,        // ??
    
    output reg [31:0] aluin1,  // 첫 번째 ALU 입력 출력
    output reg [31:0] aluin2   // 두 번째 ALU 입력 출력
    );
    
    wire [31:0]sign_imm; // sign_imm을 32비트로?
    wire [31:0]sign_imm_20; // sign_imm도 32비트로?
    assign sign_imm = {20*{imm[11]}, imm}; // ??
    assign sign_imm_20 = {imm_20, 12'b0}; // 20비트 imm_20에 12개의 0을 추가하여 32비트로 확장
    
    wire [31:0]shamt_temp; // shamt_temp도 32비트로?
    assign shamt_temp = {27'b0, shamt}; // ??
    
    always @(*) begin
        // Mux1: mux1 제어 신호에 따라 첫 번째 ALU 입력 선택
        case(mux1)
            2'b00: aluin1 = rs1;            // mux1이 00이면, 첫 번째 ALU 입력으로 rs1을 선택
            2'b01: aluin1 = pc;             // mux1이 01이면, 첫 번째 ALU 입력으로 pc를 선택
            2'b10: aluin1 = 32'b0;          // mux1이 10이면, 첫 번째 ALU 입력으로 0을 선택
        endcase
        
        // Mux2: mux2 제어 신호에 따라 두 번째 ALU 입력 선택
        case(mux2) 
            2'b00: aluin2 = rs2;            // mux2가 00이면, 두 번째 ALU 입력으로 rs2를 선택
            2'b01: aluin2 = shamt_temp;     // mux2가 01이면, 두 번째 ALU 입력으로 확장된 shamt_temp을 선택
            2'b10: aluin2 = sign_imm;       // mux2가 10이면, 두 번째 ALU 입력으로 부호 확장된 sign_imm을 선택
            2'b11: aluin2 = sign_imm_20;    // mux2가 11이면, 두 번째 ALU 입력으로 부호 확장된 20비트 sign_imm_20을 선택
        endcase
    end
endmodule

alu_mux의 역할: ALU가 다양한 연산을 수행하기 위해 필요한 입력 값을 선택하여 ALU에 전달.

궁금증:
1. imm와 imm_20가 둘다 필요한 이유가 뭔지?
2. 코드 16줄에서 sign_imm_20를 32비트로 바꾸는거 맞나?

tb 작성시 체크리스트:
1. rs1, rs2, pc, imm, shamt, imm_20의 최대 및 최소 값에서 확인 필요.
2. mux1은 세 가지 값(00, 01, 10)을 가질 수 있고 mux2는 네 가지 값(00, 01, 10, 11)을 가질 수 있음. 모든 조합을 각각 테스트해야함.
